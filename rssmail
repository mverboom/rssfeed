#!/bin/bash
#
# rssmail
#
# Process rss feeds and send a mail for each new item.
#
# ToDo:
# v Convert epoch timestamps in config to readable dates
# * Commandline parsing with override option for config file
# v HTML mail
# v Handle empty date field (set to today)
# * Write man page
# * multiple default config file locations

processfeed() {
   name="$1"
   lasttime=$2
   url="$3"
   maxtime=$lasttime
   while read line
   do
      fn=${line/:*/}
      data=${line/????:/}
      case "$fn" in
         "date") time=$(date -d "$data" "+%s")
         ;;
         "titl") title="$data"
         ;;
         "link") link="$data"
         ;;
         "desc")
            desc="$data"
            if test $lasttime -lt $time
            then
               echo -e "<html><body><b>$title</b><p>$desc<p><a href=$link>$link</a></body></html>" | mail -a 'Content-Type: text/html; charset="ISO-8859-1"' -r $mailfrom -s "$name: $title" $mailto
               test $time -gt $maxtime && maxtime=$time
            fi
         ;;
      esac
   done < <(wget -q -O - "$url" | xmlstarlet sel -t -m "//item" -o "titl:" -v "title" --nl -o "link:" -v "link" --nl -o "date:" -v "pubDate" --nl -o "desc:" -v "description" --nl)
   echo $maxtime
}

readconfig() {
   test -f ~/.rssmail.cfg || { echo "~/.rssmail.cfg doesn't exist"; exit 1; }

   declare -g -A newtime time url

   items=0
   while read line
   do
      if test "$line" != "" -a "${line:0:1}" != "#"
      then
         id=$( echo "$line" | sed 's/\([^=]*\)=.*/\1/')
         data=$( echo "$line" | sed 's/[^=]*=\(.*\)/\1/')
         case "$id" in
         "feed")
            items=$(( $items + 1 ))
            name=$( echo "$data" | sed 's/\([^:]*\):.*/\1/' )
            test "$name" = "" && { echo "Feed has no name."; exit 1; }
            test "$name" != "${name// /}" && { echo "Feed name $name contains spaces."; exit 1; }
            stamp=$( echo "$data" | sed 's/[^:]*:\([^@]*\)@.*/\1/' )
            if test "$stamp" = ""
            then
               time[$name]=$( date "+%s" )
            else
               time[$name]=$( date -d "$stamp" "+%s" )
            fi
            url[$name]=$( echo "$data" | sed 's/[^:]*:[^@]*@\(.*\)/\1/' )
            test "${url[$name]}" = "" && { echo "Feed $name has no url."; exit 1; }
         ;;
         "email-to")
            mailto="$data"
         ;;
         "email-from")
            mailfrom="$data"
         ;;
         *)
            echo "Error, unknown config line: $line"
            exit 1
         ;;
         esac
      fi
   done < ~/.rssmail.cfg
   test $items -eq 0 && { echo "No feeds found to process."; exit 1; }
   test "$mailto" = "" && { echo "No email-to defined."; exit 1; }
   test "$mailfrom" = "" && { echo "No email-from defined."; exit 1; }
}

rewriteconfig() {

   while read line
   do
      if test "$line" != "" -a "${line:0:1}" != "#"
      then
         id=$( echo "$line" | sed 's/\([^=]*\)=.*/\1/')
         data=$( echo "$line" | sed 's/[^=]*=\(.*\)/\1/')
         case "$id" in
         "feed")
            name=$( echo "$data" | sed 's/\([^:]*\):.*/\1/' )
            stamp=$( date -d "@${newtime[$name]}" "+%Y%m%d %H:%M:%S" )
            echo "feed=$name:$stamp@${url[$name]}"
         ;;
         *)
            echo "$line"
         ;;
         esac
      else
         echo "$line"
      fi
   done < ~/.rssmail.cfg > ~/.rssmail.cfg.new
   mv ~/.rssmail.cfg.new ~/.rssmail.cfg
}

sanitycheck() {
   ok=1

   for util in xmlstarlet sed mail
   do
      ! which $util > /dev/null 2>&1 && { echo "$util not found, is required."; ok=0; }
   done
   test $ok -ne 1 && exit
}

main() {
   sanitycheck
   readconfig

   for name in ${!time[@]}
   do
      newtime[$name]=$( processfeed "$name" "${time[$name]}" "${url[$name]}" )
   done

   rewriteconfig
}

main
