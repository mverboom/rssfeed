#!/bin/bash
#
# rssmail
#
# Process rss feeds and send a mail for each new item.
#

CONFIG="$HOME/.rssmail.cfg /etc/rssmail.cfg"

processfeed() {
   name="$1"
   lasttime=$2
   url="$3"
   tmpfile=$( tempfile )
   maxtime=$lasttime
   WGETFLAGS="$WGETFLAGS -q --timeout=10"
   wget $WGETFLAGS -O "$tmpfile" "$url" || { >&2 echo "Error retrieving $url."; rm -f "$tmpfile"; return 1; }
   # First try standard parse
   $XML sel -t -m "//item" --var linebreak -n --break -o "titl:" -v "title" -n -o "link:" -v "link" -n -o "date:" -v "pubDate" -n -o "desc:" -v "translate(description, \$linebreak, '^')" -n "$tmpfile" 2> /dev/null > "$tmpfile.parsed"
   # Next try parse with different XML name spaces
   if test $? -ne 0
   then
      $XML sel -N purl="http://purl.org/rss/1.0/" -N dc="http://purl.org/dc/elements/1.1/" -t -m "//rdf:RDF/purl:item" --var linebreak -n --break -o "titl:" -v purl:title -n -o "link:" -v purl:link -n -o "date:" -v dc:date -n -o "desc:" -v "translate(purl:description, \$linebreak, '^')" -n "$tmpfile" 2> /dev/null > "$tmpfile.parsed"
      test $? -ne 0 && { >&2 echo "Error parsing feed from $url."; rm -f "$tmpfile" "$tmpfile.parsed"; return 1; }
   fi
   rm -f "$tmpfile"
   while read -r line
   do
      fn=${line/:*/}
      data=${line/????:/}
      case "$fn" in
         "date") time=$(date -d "$data" "+%s")
         ;;
         "titl") title="$data"
         ;;
         "link") link="$data"
         ;;
         "desc")
            desc="$data"
            if test "$lasttime" -lt "$time"
            then
               echo -e "<html><body><b>$title</b><p>${desc//^/\\n}<p><a href=$link>$link</a><p><i>Update: $(date -d @"$time" "+%Y/%m/%d %H:%M:%S")</i></body></html>" | mail -a 'Content-Type: text/html; charset="ISO-8859-1"' -r "$mailfrom" -s "$name: $title" "$mailto"
               test "$time" -gt "$maxtime" && maxtime=$time
            fi
         ;;
      esac
   done < "$tmpfile.parsed"
   rm -f "$tmpfile.parsed"
   echo "$maxtime"
}

readconfig() {
   cfg=""
   for file in $CONFIG
   do
      test -f "$file" && { cfg=$file; break; }
   done
   test "$cfg" = "" && { echo "No valid config file found ($CONFIG)."; exit 1; }

   declare -g -A newtime time url
   XML=xmlstarlet

   items=0
   while read -r line
   do
      if test "$line" != "" -a "${line:0:1}" != "#"
      then
         id=$( echo "$line" | sed 's/\([^=]*\)=.*/\1/')
         data=$( echo "$line" | sed 's/[^=]*=\(.*\)/\1/')
         case "$id" in
         "feed")
            items=$(( items + 1 ))
            name=$( echo "$data" | sed 's/\([^:]*\):.*/\1/' )
            test "$name" = "" && { echo "Feed has no name."; exit 1; }
            test "$name" != "${name// /}" && { echo "Feed name $name contains spaces."; exit 1; }
            stamp=$( echo "$data" | sed 's/[^:]*:\([^@]*\)@.*/\1/' )
            if test "$stamp" = ""
            then
               time[$name]=$( date "+%s" )
            else
               time[$name]=$( date -d "$stamp" "+%s" )
            fi
            url[$name]=$( echo "$data" | sed 's/[^:]*:[^@]*@\(.*\)/\1/' )
            test "${url[$name]}" = "" && { echo "Feed $name has no url."; exit 1; }
         ;;
         "email-to")
            mailto="$data"
         ;;
         "email-from")
            mailfrom="$data"
         ;;
         "xmlstarlet")
            XML="$data"
         ;;
         "proxy")
            export http_proxy=$data
            export https_proxy=$data
         ;;
         "ipv4only")
            WGETFLAGS="-4"
         ;;
         *)
             >&2 echo "Unknown line in config file, skipping: $line"
         ;;
         esac
      fi
   done < "$cfg"
   test $items -eq 0 && { echo "No feeds found to process."; exit 1; }
   test "$mailto" = "" && { echo "No email-to defined."; exit 1; }
   test "$mailfrom" = "" && { echo "No email-from defined."; exit 1; }
}

rewriteconfig() {
   while read -r line
   do
      if test "$line" != "" -a "${line:0:1}" != "#"
      then
         id=$( echo "$line" | sed 's/\([^=]*\)=.*/\1/')
         data=$( echo "$line" | sed 's/[^=]*=\(.*\)/\1/')
         case "$id" in
         "feed")
            name=$( echo "$data" | sed 's/\([^:]*\):.*/\1/' )
            if test "${newtime[$name]}" != ""
            then
               stamp=$( date -d "@${newtime[$name]}" "+%Y%m%d %H:%M:%S" )
            else
               stamp=""
            fi
            echo "feed=$name:$stamp@${url[$name]}"
         ;;
         *)
            echo "$line"
         ;;
         esac
      else
         echo "$line"
      fi
   done < "$cfg" > "$cfg.new"
   mv "$cfg.new" "$cfg"
}

sanitycheck() {
   ok=1

   for util in xmlstarlet sed mail
   do
      ! which $util > /dev/null 2>&1 && { echo "$util not found, is required."; ok=0; }
   done
   test $ok -ne 1 && exit
}

usage() {
   echo "Usage: $0 [OPTION]"
   echo "Check all configured RSS feeds for updates and mail them."
   echo
   echo "Arguments:"
   echo "  -c <file>       Use specific config file."
   echo "  -h              Show this usage information."
   exit 1
}

parseoptions() {
   while getopts :c:h opt; do
      case $opt in
         c)
            CONFIG=$OPTARG
         ;;
         h)
            usage
         ;;
         \?)
            echo "Unknown option: -$OPTARG"
            usage
         ;;
         :)
            echo "Option -$OPTARG requires argument"
            usage
         ;;
      esac
   done
}

main() {
   parseoptions "$@"
   readconfig
   sanitycheck

   for name in "${!time[@]}"
   do
      result=$( processfeed "$name" "${time[$name]}" "${url[$name]}" )
      if test $? -eq 0
      then
         newtime[$name]=$result
      fi
   done

   rewriteconfig
}

main "$@"
